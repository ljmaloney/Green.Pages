name: Build and Push Docker Image to ECR (bmuschko)

on:
  push:
    branches:
      - main
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Bump version (main/master only)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          FILE=version.properties
          VERSION=$(grep 'version=' $FILE | cut -d= -f2)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" > $FILE
          echo "New version: $NEW_VERSION"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add $FILE
          git commit -m "CI: Bump version to $NEW_VERSION"
          git push

      - name: Export version from properties
        id: export_version
        run: echo "VERSION=$(grep 'version=' version.properties | cut -d= -f2)" >> $GITHUB_ENV

      - name: Run tests
        run: ./gradlew test

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI

      - name: Build Docker image using bmuschko
        run: ./gradlew :backend:dockerBuildImage

      - name: Tag and Push image to ECR
        run: |
          IMAGE_TAG=v${VERSION}
          docker tag your-image-name:latest $ECR_REPO_URI:$IMAGE_TAG
          docker tag your-image-name:latest $ECR_REPO_URI:latest
          docker push $ECR_REPO_URI:$IMAGE_TAG
          docker push $ECR_REPO_URI:latest
