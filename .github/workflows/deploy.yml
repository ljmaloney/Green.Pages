name: Build and Deploy to AWS ECR

on:
  push:
    branches:
      - main
      - master
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GH_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Bump version (main/master only)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          FILE=version.properties

          VERSION=$(grep 'version=' $FILE | cut -d= -f2)
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" > $FILE
          echo "New version: $NEW_VERSION"

          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}

          git stash
          git fetch origin
          git pull --rebase origin ${GITHUB_REF#refs/heads/}
          git stash pop

          git add $FILE
          git commit -m "CI: Bump version to $NEW_VERSION" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Set version env var
        id: version
        run: echo "VERSION=$(grep 'version=' version.properties | cut -d= -f2)" >> $GITHUB_ENV

      - name: Run tests
        run: ./gradlew test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS ECR Login Password
        run: |
          echo "AWS_ECR_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_ENV
#            - name: Build and push Docker image to ECR with Jib
#              run: |
#                ./gradlew jib \
#                  -Djib.to.image=$ECR_REPO_URI/images/green-yp-service \
#                  -Djib.to.auth.username=AWS \
#                  -Djib.to.auth.password=$AWS_ECR_PASSWORD \
#                  -Djib.to.tags=latest,v${VERSION}

      - name: Build and push backend image
        run: |
          IMAGE_TAG=$ECR_REPO_URI/images/green-yp-service:$VERSION
          ./gradlew :green.yp.backend:jib \
            -Djib.to.image=$IMAGE_TAG \
            -Djib.to.auth.username=AWS \
            -Djib.to.auth.password=$(aws ecr get-login-password --region $AWS_REGION)
